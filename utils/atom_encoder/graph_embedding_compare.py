import torch
from itertools import combinations
from torch.nn import CosineSimilarity

# C[C@]([H])(N1C=CNC1)N, cS
# [H][C@](C1=CC=CC=C1)(O)C, bS
# C[C@](N)(N1C=CNC1)[H], dR
# C[C@]([H])(C1=CC=CC=C1)O, aR
# C[C@]([H])(C1=CC=CC=C1)O, aR
# [H][C@](C1=CC=CC=C1)(O)C, bS
# [H][C@](C1=CC=CC=C1)(O)C, bS
# C[C@]([H])(N1C=CNC1)N, cS

graph_embedding = torch.tensor([[34.8604, 6.7738, 12.5057, -22.6977, 9.5806, 12.9016, -20.0890,
                                 -7.2624, -43.1649, 19.9760, -4.6118, -17.9885, 25.2579, 9.3213,
                                 -20.1674, -4.4051, 14.1021, 1.3332, 14.7258, -55.5503, 9.1600,
                                 3.7765, -15.1032, -7.3026, -14.9600, -10.9105, -12.7177, 1.8202,
                                 6.8195, -52.4170, -16.6695, 37.3712],
                                [-5.8354, 26.6683, 29.6315, -4.3685, -22.1754, -5.0527, -28.2634,
                                 -19.6534, -26.5267, -7.3981, -2.1995, -24.8497, 6.9682, -6.4639,
                                 -20.8755, -25.9856, -2.2431, 14.5871, -12.3015, -21.7985, 20.9027,
                                 -12.3604, 10.3051, -14.6383, -9.0745, -30.0734, -14.9934, 24.4169,
                                 -4.9770, -35.5239, 6.5079, 31.7292],
                                [-5.7049, 25.2523, 26.8964, -3.2448, -21.3037, -4.0546, -26.6837,
                                 -18.2978, -25.5770, -6.3895, -1.9602, -23.4155, 6.5598, -6.8675,
                                 -19.7547, -23.8281, -1.8525, 13.3350, -11.6488, -20.9467, 19.8354,
                                 -11.2263, 9.2529, -14.0896, -9.0598, -28.4943, -14.0552, 23.1534,
                                 -4.3913, -33.0775, 5.8330, 31.7590],
                                [40.5481, 5.5458, 12.8322, -25.7340, 13.0805, 14.3253, -20.5024,
                                 -6.8163, -46.4015, 22.7571, -5.1093, -18.4687, 28.2063, 12.0311,
                                 -21.0537, -3.8448, 15.9219, 0.9722, 17.6413, -60.4071, 8.6651,
                                 4.7476, -17.4775, -6.0655, -16.0225, -10.0192, -13.7227, 0.1223,
                                 7.9122, -57.1777, -19.0812, 38.7117],
                                [40.5481, 5.5458, 12.8322, -25.7340, 13.0805, 14.3253, -20.5024,
                                 -6.8163, -46.4015, 22.7571, -5.1093, -18.4687, 28.2063, 12.0311,
                                 -21.0537, -3.8448, 15.9219, 0.9722, 17.6413, -60.4071, 8.6651,
                                 4.7476, -17.4775, -6.0655, -16.0225, -10.0192, -13.7227, 0.1223,
                                 7.9122, -57.1777, -19.0812, 38.7117],
                                [-5.8354, 26.6683, 29.6315, -4.3685, -22.1754, -5.0527, -28.2634,
                                 -19.6534, -26.5267, -7.3981, -2.1995, -24.8497, 6.9682, -6.4639,
                                 -20.8755, -25.9856, -2.2431, 14.5871, -12.3015, -21.7985, 20.9027,
                                 -12.3604, 10.3051, -14.6383, -9.0745, -30.0734, -14.9934, 24.4169,
                                 -4.9770, -35.5239, 6.5079, 31.7292],
                                [-5.8354, 26.6683, 29.6315, -4.3685, -22.1754, -5.0527, -28.2634,
                                 -19.6534, -26.5267, -7.3981, -2.1995, -24.8497, 6.9682, -6.4639,
                                 -20.8755, -25.9856, -2.2431, 14.5871, -12.3015, -21.7985, 20.9027,
                                 -12.3604, 10.3051, -14.6383, -9.0745, -30.0734, -14.9934, 24.4169,
                                 -4.9770, -35.5239, 6.5079, 31.7292],
                                [34.8604, 6.7738, 12.5057, -22.6977, 9.5806, 12.9016, -20.0890,
                                 -7.2624, -43.1649, 19.9760, -4.6118, -17.9885, 25.2579, 9.3213,
                                 -20.1674, -4.4051, 14.1021, 1.3332, 14.7258, -55.5503, 9.1600,
                                 3.7765, -15.1032, -7.3026, -14.9600, -10.9105, -12.7177, 1.8202,
                                 6.8195, -52.4170, -16.6695, 37.3712]])

smiles_list = ['cS', 'bS', 'dR', 'aR']
# C[C@]([H])(N1C=CNC1)N, cS
# [H][C@](C1=CC=CC=C1)(O)C, bS
# C[C@](N)(N1C=CNC1)[H], dR
# C[C@]([H])(C1=CC=CC=C1)O, aR]


graph_embedding = torch.tensor([[34.8604, 6.7738, 12.5057, -22.6977, 9.5806, 12.9016, -20.0890,
                                 -7.2624, -43.1649, 19.9760, -4.6118, -17.9885, 25.2579, 9.3213,
                                 -20.1674, -4.4051, 14.1021, 1.3332, 14.7258, -55.5503, 9.1600,
                                 3.7765, -15.1032, -7.3026, -14.9600, -10.9105, -12.7177, 1.8202,
                                 6.8195, -52.4170, -16.6695, 37.3712],
                                [-5.8354, 26.6683, 29.6315, -4.3685, -22.1754, -5.0527, -28.2634,
                                 -19.6534, -26.5267, -7.3981, -2.1995, -24.8497, 6.9682, -6.4639,
                                 -20.8755, -25.9856, -2.2431, 14.5871, -12.3015, -21.7985, 20.9027,
                                 -12.3604, 10.3051, -14.6383, -9.0745, -30.0734, -14.9934, 24.4169,
                                 -4.9770, -35.5239, 6.5079, 31.7292],
                                [-5.7049, 25.2523, 26.8964, -3.2448, -21.3037, -4.0546, -26.6837,
                                 -18.2978, -25.5770, -6.3895, -1.9602, -23.4155, 6.5598, -6.8675,
                                 -19.7547, -23.8281, -1.8525, 13.3350, -11.6488, -20.9467, 19.8354,
                                 -11.2263, 9.2529, -14.0896, -9.0598, -28.4943, -14.0552, 23.1534,
                                 -4.3913, -33.0775, 5.8330, 31.7590],
                                [40.5481, 5.5458, 12.8322, -25.7340, 13.0805, 14.3253, -20.5024,
                                 -6.8163, -46.4015, 22.7571, -5.1093, -18.4687, 28.2063, 12.0311,
                                 -21.0537, -3.8448, 15.9219, 0.9722, 17.6413, -60.4071, 8.6651,
                                 4.7476, -17.4775, -6.0655, -16.0225, -10.0192, -13.7227, 0.1223,
                                 7.9122, -57.1777, -19.0812, 38.7117]])


graph_emb_list = graph_embedding.unbind()

graph_emb_list
combs = combinations([0, 1, 2, 3], 2)

cos = CosineSimilarity(dim=-1)
for comb in combs:
    t1 = graph_emb_list[comb[0]]
    t2 = graph_emb_list[comb[1]]
    cos_sc = cos(t1, t2)
    print(f'comb:({smiles_list[comb[0]]}, {smiles_list[comb[1]]}) score = {cos_sc}')
